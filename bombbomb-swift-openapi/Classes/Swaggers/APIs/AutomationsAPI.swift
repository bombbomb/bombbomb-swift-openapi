//
// AutomationsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class AutomationsAPI: APIBase {
    /**
     Get Automation Email Stats
     
     - parameter dripId: (path) The id of the drip 
     - parameter dripDropId: (path) The id of the drip drop 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDripDropStats(dripId dripId: String, dripDropId: String, completion: ((error: ErrorType?) -> Void)) {
        getDripDropStatsWithRequestBuilder(dripId: dripId, dripDropId: dripDropId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get Automation Email Stats
     - GET /automation/{dripId}/dripdrop/{dripDropId}/stats
     - Get Automation Email Stats
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter dripId: (path) The id of the drip 
     - parameter dripDropId: (path) The id of the drip drop 

     - returns: RequestBuilder<Void> 
     */
    public class func getDripDropStatsWithRequestBuilder(dripId dripId: String, dripDropId: String) -> RequestBuilder<Void> {
        var path = "/automation/{dripId}/dripdrop/{dripDropId}/stats"
        path = path.stringByReplacingOccurrencesOfString("{dripId}", withString: "\(dripId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{dripDropId}", withString: "\(dripDropId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Automation Stats
     
     - parameter id: (path) The id of the automation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getDripStats(id id: String, completion: ((error: ErrorType?) -> Void)) {
        getDripStatsWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get Automation Stats
     - GET /automation/{id}/stats
     - Get Automation Stats
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter id: (path) The id of the automation 

     - returns: RequestBuilder<Void> 
     */
    public class func getDripStatsWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/automation/{id}/stats"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get the number of pending scheduling calculations
     
     - parameter id: (path) The id of the automation 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSchedulingStatus(id id: String, completion: ((error: ErrorType?) -> Void)) {
        getSchedulingStatusWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get the number of pending scheduling calculations
     - GET /automation/{id}/scheduling/status
     - Get the number of pending scheduling calculations
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter id: (path) The id of the automation 

     - returns: RequestBuilder<Void> 
     */
    public class func getSchedulingStatusWithRequestBuilder(id id: String) -> RequestBuilder<Void> {
        var path = "/automation/{id}/scheduling/status"
        path = path.stringByReplacingOccurrencesOfString("{id}", withString: "\(id)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
