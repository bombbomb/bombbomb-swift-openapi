//
// SocialsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class SocialsAPI: APIBase {
    /**
     Gets the social email properties
     
     - parameter jerichoId: (query) associated jericho Id 
     - parameter emailId: (query) This is the email Id for the email url 
     - parameter originatorId: (query) This is the originator Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSocialArticleProperties(jerichoId jerichoId: String, emailId: String, originatorId: String, completion: ((error: ErrorType?) -> Void)) {
        getSocialArticlePropertiesWithRequestBuilder(jerichoId: jerichoId, emailId: emailId, originatorId: originatorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Gets the social email properties
     - GET /socials/properties
     - Gets the social email properties
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter jerichoId: (query) associated jericho Id 
     - parameter emailId: (query) This is the email Id for the email url 
     - parameter originatorId: (query) This is the originator Id 

     - returns: RequestBuilder<Void> 
     */
    public class func getSocialArticlePropertiesWithRequestBuilder(jerichoId jerichoId: String, emailId: String, originatorId: String) -> RequestBuilder<Void> {
        let path = "/socials/properties"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "jerichoId": jerichoId,
            "emailId": emailId,
            "originatorId": originatorId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets the auto shares from the client group assoc id
     
     - parameter clientGroupId: (query) ID of the client group association 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSocialAutoShares(clientGroupId clientGroupId: String, completion: ((error: ErrorType?) -> Void)) {
        getSocialAutoSharesWithRequestBuilder(clientGroupId: clientGroupId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Gets the auto shares from the client group assoc id
     - GET /socials/shares
     - Gets the auto shares from the client group assoc id
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter clientGroupId: (query) ID of the client group association 

     - returns: RequestBuilder<Void> 
     */
    public class func getSocialAutoSharesWithRequestBuilder(clientGroupId clientGroupId: String) -> RequestBuilder<Void> {
        let path = "/socials/shares"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "clientGroupId": clientGroupId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get permissions for social integration
     
     - parameter socialType: (query) Type of social integration 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSocialPermissions(socialType socialType: String, completion: ((error: ErrorType?) -> Void)) {
        getSocialPermissionsWithRequestBuilder(socialType: socialType).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get permissions for social integration
     - GET /socials/permissions
     - Get permissions for social integration and has redirect for user to login
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter socialType: (query) Type of social integration 

     - returns: RequestBuilder<Void> 
     */
    public class func getSocialPermissionsWithRequestBuilder(socialType socialType: String) -> RequestBuilder<Void> {
        let path = "/socials/permissions"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "socialType": socialType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets the social state
     
     - parameter originatorId: (query) associated originatorId 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSocialStatus(originatorId originatorId: String, completion: ((error: ErrorType?) -> Void)) {
        getSocialStatusWithRequestBuilder(originatorId: originatorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Gets the social state
     - GET /socials/states
     - Gets the social state
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter originatorId: (query) associated originatorId 

     - returns: RequestBuilder<Void> 
     */
    public class func getSocialStatusWithRequestBuilder(originatorId originatorId: String) -> RequestBuilder<Void> {
        let path = "/socials/states"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "originatorId": originatorId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets the auto shares from the client group assoc id
     
     - parameter autoShare: (form) The social share that will auto share to 
     - parameter clientGroupId: (form) ID of the client group association 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSocialAutoShares(autoShare autoShare: String, clientGroupId: String, completion: ((error: ErrorType?) -> Void)) {
        updateSocialAutoSharesWithRequestBuilder(autoShare: autoShare, clientGroupId: clientGroupId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Gets the auto shares from the client group assoc id
     - PUT /socials/shares
     - Gets the auto shares from the client group assoc id
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter autoShare: (form) The social share that will auto share to 
     - parameter clientGroupId: (form) ID of the client group association 

     - returns: RequestBuilder<Void> 
     */
    public class func updateSocialAutoSharesWithRequestBuilder(autoShare autoShare: String, clientGroupId: String) -> RequestBuilder<Void> {
        let path = "/socials/shares"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "autoShare": autoShare,
            "clientGroupId": clientGroupId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Sets the users social message to what they typed in
     
     - parameter message: (form) The social message the user typed in 
     - parameter originatorId: (form) The parent id tied to the social share 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSocialMessage(message message: String, originatorId: String, completion: ((error: ErrorType?) -> Void)) {
        updateSocialMessageWithRequestBuilder(message: message, originatorId: originatorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Sets the users social message to what they typed in
     - PUT /socials/message
     - Sets the users social message to what they typed in
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter message: (form) The social message the user typed in 
     - parameter originatorId: (form) The parent id tied to the social share 

     - returns: RequestBuilder<Void> 
     */
    public class func updateSocialMessageWithRequestBuilder(message message: String, originatorId: String) -> RequestBuilder<Void> {
        let path = "/socials/message"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "message": message,
            "originatorId": originatorId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Updates the social state for the object
     
     - parameter state: (form) The state to set to 
     - parameter originatorId: (form) The parent id tied to the social share 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSocialStatus(state state: String, originatorId: String, completion: ((error: ErrorType?) -> Void)) {
        updateSocialStatusWithRequestBuilder(state: state, originatorId: originatorId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Updates the social state for the object
     - PUT /socials/state
     - Updates the social state for the object
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter state: (form) The state to set to 
     - parameter originatorId: (form) The parent id tied to the social share 

     - returns: RequestBuilder<Void> 
     */
    public class func updateSocialStatusWithRequestBuilder(state state: String, originatorId: String) -> RequestBuilder<Void> {
        let path = "/socials/state"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "state": state,
            "originatorId": originatorId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
