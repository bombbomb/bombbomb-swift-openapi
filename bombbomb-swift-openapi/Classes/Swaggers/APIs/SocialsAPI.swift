//
// SocialsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class SocialsAPI: APIBase {
    /**
     Gets facebook pages
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getFacebookPages(completion: ((error: ErrorType?) -> Void)) {
        getFacebookPagesWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Gets facebook pages
     - GET /socials/facebook/pages
     - Gets facebook pages by client id
     - OAuth:
       - type: oauth2
       - name: BBOAuth2

     - returns: RequestBuilder<Void> 
     */
    public class func getFacebookPagesWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/socials/facebook/pages"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets the social email properties
     
     - parameter emailId: (query) This is the email Id for the email url 
     - parameter socialContentId: (query) This is the social content Id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSocialArticleProperties(emailId emailId: String, socialContentId: String, completion: ((error: ErrorType?) -> Void)) {
        getSocialArticlePropertiesWithRequestBuilder(emailId: emailId, socialContentId: socialContentId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Gets the social email properties
     - GET /socials/properties
     - Gets the social email properties
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter emailId: (query) This is the email Id for the email url 
     - parameter socialContentId: (query) This is the social content Id 

     - returns: RequestBuilder<Void> 
     */
    public class func getSocialArticlePropertiesWithRequestBuilder(emailId emailId: String, socialContentId: String) -> RequestBuilder<Void> {
        let path = "/socials/properties"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "emailId": emailId,
            "socialContentId": socialContentId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get authorizations for all social integration
     
     - parameter clientGroupId: (query) ID of the client group association (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSocialAuthorizations(clientGroupId clientGroupId: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        getSocialAuthorizationsWithRequestBuilder(clientGroupId: clientGroupId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get authorizations for all social integration
     - GET /socials/authorizations
     - Get authorizations and autoshares for all social integration and has redirect for user to login
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter clientGroupId: (query) ID of the client group association (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func getSocialAuthorizationsWithRequestBuilder(clientGroupId clientGroupId: String? = nil) -> RequestBuilder<Void> {
        let path = "/socials/authorizations"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "clientGroupId": clientGroupId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets the profile properties
     
     - parameter socialType: (query) The social type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSocialProfileProperties(socialType socialType: String, completion: ((error: ErrorType?) -> Void)) {
        getSocialProfilePropertiesWithRequestBuilder(socialType: socialType).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Gets the profile properties
     - GET /socials/profile
     - Gets the social profile properties
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter socialType: (query) The social type 

     - returns: RequestBuilder<Void> 
     */
    public class func getSocialProfilePropertiesWithRequestBuilder(socialType socialType: String) -> RequestBuilder<Void> {
        let path = "/socials/profile"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "socialType": socialType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Get social stats for a prompt
     
     - parameter promptId: (path) ID of the prompt 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSocialStats(promptId promptId: String, completion: ((error: ErrorType?) -> Void)) {
        getSocialStatsWithRequestBuilder(promptId: promptId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Get social stats for a prompt
     - GET /socials/{promptId}/stats
     - Get social stats for a prompt by id
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter promptId: (path) ID of the prompt 

     - returns: RequestBuilder<Void> 
     */
    public class func getSocialStatsWithRequestBuilder(promptId promptId: String) -> RequestBuilder<Void> {
        var path = "/socials/{promptId}/stats"
        path = path.stringByReplacingOccurrencesOfString("{promptId}", withString: "\(promptId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Creates social content
     
     - parameter emailId: (form) The email&#39;s id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func postSocialContent(emailId emailId: String, completion: ((error: ErrorType?) -> Void)) {
        postSocialContentWithRequestBuilder(emailId: emailId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Creates social content
     - POST /socials/content
     - Creates social content for an email
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter emailId: (form) The email&#39;s id 

     - returns: RequestBuilder<Void> 
     */
    public class func postSocialContentWithRequestBuilder(emailId emailId: String) -> RequestBuilder<Void> {
        let path = "/socials/content"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "emailId": emailId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Sends social content
     
     - parameter promptId: (form) The prompt id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func retrySocialSend(promptId promptId: String, completion: ((error: ErrorType?) -> Void)) {
        retrySocialSendWithRequestBuilder(promptId: promptId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Sends social content
     - POST /socials/send/retry
     - Sends social content that failed for a user via their associated prompt
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter promptId: (form) The prompt id 

     - returns: RequestBuilder<Void> 
     */
    public class func retrySocialSendWithRequestBuilder(promptId promptId: String) -> RequestBuilder<Void> {
        let path = "/socials/send/retry"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "promptId": promptId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Sends social content
     
     - parameter promptId: (form) The prompt id 
     - parameter socialType: (form) The destination for social content 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendSocial(promptId promptId: String, socialType: String, completion: ((error: ErrorType?) -> Void)) {
        sendSocialWithRequestBuilder(promptId: promptId, socialType: socialType).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Sends social content
     - POST /socials/send
     - Sends social content for a user via their associated prompt
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter promptId: (form) The prompt id 
     - parameter socialType: (form) The destination for social content 

     - returns: RequestBuilder<Void> 
     */
    public class func sendSocialWithRequestBuilder(promptId promptId: String, socialType: String) -> RequestBuilder<Void> {
        let path = "/socials/send"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "promptId": promptId,
            "socialType": socialType
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Gets the auto shares from the client group assoc id
     
     - parameter sendMechanism: (form) The send mechanism for the prompt 
     - parameter clientGroupId: (form) ID of the client group association 
     - parameter enabled: (form) Is the send mechanism enabled? (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateClientGroupSendMechanism(sendMechanism sendMechanism: String, clientGroupId: String, enabled: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateClientGroupSendMechanismWithRequestBuilder(sendMechanism: sendMechanism, clientGroupId: clientGroupId, enabled: enabled).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Gets the auto shares from the client group assoc id
     - PUT /socials/client/sendMechanism
     - Gets the auto shares from the client group assoc id
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter sendMechanism: (form) The send mechanism for the prompt 
     - parameter clientGroupId: (form) ID of the client group association 
     - parameter enabled: (form) Is the send mechanism enabled? (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateClientGroupSendMechanismWithRequestBuilder(sendMechanism sendMechanism: String, clientGroupId: String, enabled: String? = nil) -> RequestBuilder<Void> {
        let path = "/socials/client/sendMechanism"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "sendMechanism": sendMechanism,
            "clientGroupId": clientGroupId,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Toggles the prompt campaigns in a users account
     
     - parameter sendMechanism: (form) The send mechanism for the prompt 
     - parameter enabled: (form) Is the send mechanism enabled? 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateClientGroupsSendMechanism(sendMechanism sendMechanism: String, enabled: String, completion: ((error: ErrorType?) -> Void)) {
        updateClientGroupsSendMechanismWithRequestBuilder(sendMechanism: sendMechanism, enabled: enabled).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Toggles the prompt campaigns in a users account
     - PUT /socials/client/sendMechanisms
     - Toggles the prompt campaigns in a users account for a social integrations on or off
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter sendMechanism: (form) The send mechanism for the prompt 
     - parameter enabled: (form) Is the send mechanism enabled? 

     - returns: RequestBuilder<Void> 
     */
    public class func updateClientGroupsSendMechanismWithRequestBuilder(sendMechanism sendMechanism: String, enabled: String) -> RequestBuilder<Void> {
        let path = "/socials/client/sendMechanisms"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "sendMechanism": sendMechanism,
            "enabled": enabled
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Updates facebook page Ids
     
     - parameter pageIds: (form) Page Ids for the prompt 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateFacebookPages(pageIds pageIds: String, completion: ((error: ErrorType?) -> Void)) {
        updateFacebookPagesWithRequestBuilder(pageIds: pageIds).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Updates facebook page Ids
     - PUT /socials/facebook/pages
     - Updates facebook page Ids to be sent to for prompts
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter pageIds: (form) Page Ids for the prompt 

     - returns: RequestBuilder<Void> 
     */
    public class func updateFacebookPagesWithRequestBuilder(pageIds pageIds: String) -> RequestBuilder<Void> {
        let path = "/socials/facebook/pages"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "pageIds": pageIds
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Updates social content
     
     - parameter socialId: (form) The social id 
     - parameter title: (form) The title for the article (optional)
     - parameter description: (form) The article description (optional)
     - parameter pictureUrl: (form) The article picture url (optional)
     - parameter suggestedMessage: (form) The suggested message to use (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateSocialContent(socialId socialId: String, title: String? = nil, description: String? = nil, pictureUrl: String? = nil, suggestedMessage: String? = nil, completion: ((error: ErrorType?) -> Void)) {
        updateSocialContentWithRequestBuilder(socialId: socialId, title: title, description: description, pictureUrl: pictureUrl, suggestedMessage: suggestedMessage).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Updates social content
     - PUT /socials/content
     - Updates social content for an email
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter socialId: (form) The social id 
     - parameter title: (form) The title for the article (optional)
     - parameter description: (form) The article description (optional)
     - parameter pictureUrl: (form) The article picture url (optional)
     - parameter suggestedMessage: (form) The suggested message to use (optional)

     - returns: RequestBuilder<Void> 
     */
    public class func updateSocialContentWithRequestBuilder(socialId socialId: String, title: String? = nil, description: String? = nil, pictureUrl: String? = nil, suggestedMessage: String? = nil) -> RequestBuilder<Void> {
        let path = "/socials/content"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "socialId": socialId,
            "title": title,
            "description": description,
            "pictureUrl": pictureUrl,
            "suggestedMessage": suggestedMessage
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
