//
// TeamsAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class TeamsAPI: APIBase {
    /**
     Add Member to Team
     
     - parameter teamId: (path) The team id 
     - parameter userId: (form) The user id of the member being added to the team. (optional)
     - parameter userEmail: (form) The email of the member being added to the team. (optional)
     - parameter admin: (form) Set if the user is an admin of this team. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addTeamMember(teamId teamId: String, userId: String? = nil, userEmail: String? = nil, admin: Bool? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        addTeamMemberWithRequestBuilder(teamId: teamId, userId: userId, userEmail: userEmail, admin: admin).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add Member to Team
     - POST /team/{teamId}/member
     - Adds a member to a team.
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example="aeiou", contentType=application/json}]
     
     - parameter teamId: (path) The team id 
     - parameter userId: (form) The user id of the member being added to the team. (optional)
     - parameter userEmail: (form) The email of the member being added to the team. (optional)
     - parameter admin: (form) Set if the user is an admin of this team. (optional)

     - returns: RequestBuilder<String> 
     */
    public class func addTeamMemberWithRequestBuilder(teamId teamId: String, userId: String? = nil, userEmail: String? = nil, admin: Bool? = nil) -> RequestBuilder<String> {
        var path = "/team/{teamId}/member"
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "userId": userId,
            "userEmail": userEmail,
            "admin": admin
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Cancel a Jericho Send
     
     - parameter jerichoId: (path) ID of the Jericho Job to cancel 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func cancelJerichoSend(jerichoId jerichoId: String, completion: ((error: ErrorType?) -> Void)) {
        cancelJerichoSendWithRequestBuilder(jerichoId: jerichoId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Cancel a Jericho Send
     - DELETE /team/{teamId}/jericho/{jerichoId}
     - Cancels a scheduled Jericho send from being sent.
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter jerichoId: (path) ID of the Jericho Job to cancel 

     - returns: RequestBuilder<Void> 
     */
    public class func cancelJerichoSendWithRequestBuilder(jerichoId jerichoId: String) -> RequestBuilder<Void> {
        var path = "/team/{teamId}/jericho/{jerichoId}"
        path = path.stringByReplacingOccurrencesOfString("{jerichoId}", withString: "\(jerichoId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Add a Subteam
     
     - parameter teamId: (path) The team id 
     - parameter name: (form) The subteam&#39;s name. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func createSubteam(teamId teamId: String, name: String, completion: ((data: TeamPublicRepresentation?, error: ErrorType?) -> Void)) {
        createSubteamWithRequestBuilder(teamId: teamId, name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add a Subteam
     - POST /team/{teamId}/subteam
     - Adds a subteam to a parent team
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example={
  "id" : "aeiou",
  "name" : "aeiou",
  "createdDate" : "aeiou"
}, contentType=application/json}]
     
     - parameter teamId: (path) The team id 
     - parameter name: (form) The subteam&#39;s name. 

     - returns: RequestBuilder<TeamPublicRepresentation> 
     */
    public class func createSubteamWithRequestBuilder(teamId teamId: String, name: String) -> RequestBuilder<TeamPublicRepresentation> {
        var path = "/team/{teamId}/subteam"
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "name": name
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TeamPublicRepresentation>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Delete Subteam
     
     - parameter teamId: (path) The team id 
     - parameter subteamId: (form) The subteam you wish to delete. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteSubteam(teamId teamId: String, subteamId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteSubteamWithRequestBuilder(teamId: teamId, subteamId: subteamId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Delete Subteam
     - DELETE /team/{teamId}/subteam
     - Deletes a subteam
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example="aeiou", contentType=application/json}]
     
     - parameter teamId: (path) The team id 
     - parameter subteamId: (form) The subteam you wish to delete. 

     - returns: RequestBuilder<String> 
     */
    public class func deleteSubteamWithRequestBuilder(teamId teamId: String, subteamId: String) -> RequestBuilder<String> {
        var path = "/team/{teamId}/subteam"
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "subteamId": subteamId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Lists team associations
     
     - parameter clientId: (query) The clientId requesting group associations. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getAllClientGroupAssociations(clientId clientId: String, completion: ((error: ErrorType?) -> Void)) {
        getAllClientGroupAssociationsWithRequestBuilder(clientId: clientId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Lists team associations
     - GET /team/associations/
     - Returns a collection of team associations for a given user
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter clientId: (query) The clientId requesting group associations. 

     - returns: RequestBuilder<Void> 
     */
    public class func getAllClientGroupAssociationsWithRequestBuilder(clientId clientId: String) -> RequestBuilder<Void> {
        let path = "/team/associations/"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "clientId": clientId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     * enum for parameter assetType
     */
    public enum AssetType_getClientGroupAssets: String { 
        case Email = "email"
        case Video = "video"
    }

    /**
     Lists team assets
     
     - parameter assetType: (query) The type of assets. 
     - parameter teamId: (query) The team containing the assets. (optional)
     - parameter autoTagName: (query) The auto tag name containing the assets. (optional)
     - parameter pageSize: (query) The number of items to retrieve in a single db query. (optional)
     - parameter page: (query) Zero-based index of the page of data to retrieve from the db. (optional)
     - parameter search: (query) Search words. (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getClientGroupAssets(assetType assetType: AssetType_getClientGroupAssets, teamId: String? = nil, autoTagName: String? = nil, pageSize: String? = nil, page: String? = nil, search: String? = nil, completion: ((data: InlineResponse200?, error: ErrorType?) -> Void)) {
        getClientGroupAssetsWithRequestBuilder(assetType: assetType, teamId: teamId, autoTagName: autoTagName, pageSize: pageSize, page: page, search: search).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Lists team assets
     - GET /team/assets/
     - Returns a collection of assets
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example={
  "items" : [ {
    "id" : "aeiou",
    "userId" : "aeiou",
    "name" : "aeiou",
    "thumbUrl" : "aeiou"
  } ],
  "totalPages" : ""
}, contentType=application/json}]
     
     - parameter assetType: (query) The type of assets. 
     - parameter teamId: (query) The team containing the assets. (optional)
     - parameter autoTagName: (query) The auto tag name containing the assets. (optional)
     - parameter pageSize: (query) The number of items to retrieve in a single db query. (optional)
     - parameter page: (query) Zero-based index of the page of data to retrieve from the db. (optional)
     - parameter search: (query) Search words. (optional)

     - returns: RequestBuilder<InlineResponse200> 
     */
    public class func getClientGroupAssetsWithRequestBuilder(assetType assetType: AssetType_getClientGroupAssets, teamId: String? = nil, autoTagName: String? = nil, pageSize: String? = nil, page: String? = nil, search: String? = nil) -> RequestBuilder<InlineResponse200> {
        let path = "/team/assets/"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "assetType": assetType.rawValue,
            "teamId": teamId,
            "autoTagName": autoTagName,
            "pageSize": pageSize,
            "page": page,
            "search": search
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<InlineResponse200>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     List Jericho Sends
     
     - parameter teamId: (path) The team whose Jericho sends you wish to see. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJerichoSends(teamId teamId: String, completion: ((data: [JerichoConfiguration]?, error: ErrorType?) -> Void)) {
        getJerichoSendsWithRequestBuilder(teamId: teamId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List Jericho Sends
     - GET /team/{teamId}/jericho
     - Lists Jericho sends, both pending and sent.
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example=[ {
  "clientGroupId" : "aeiou",
  "exampleVideoId" : "aeiou",
  "sendWithoutVideo" : true,
  "status" : "aeiou",
  "promptIntro" : "aeiou",
  "promptBody" : "aeiou",
  "emailSubject" : "aeiou",
  "printToTemplate" : true,
  "id" : "aeiou",
  "sendDate" : "2000-01-23T04:56:07.000+00:00",
  "emailId" : "aeiou",
  "followUpVideoId" : "aeiou",
  "emailBody" : "aeiou",
  "isPrompt" : true,
  "promptSubject" : "aeiou"
} ], contentType=application/json}]
     
     - parameter teamId: (path) The team whose Jericho sends you wish to see. 

     - returns: RequestBuilder<[JerichoConfiguration]> 
     */
    public class func getJerichoSendsWithRequestBuilder(teamId teamId: String) -> RequestBuilder<[JerichoConfiguration]> {
        var path = "/team/{teamId}/jericho"
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[JerichoConfiguration]>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Gets Jericho performance statistics
     
     - parameter jerichoId: (path) ID of the Jericho job 
     - parameter teamId: (path) ID of team through which Jericho was sent 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getJerichoStats(jerichoId jerichoId: String, teamId: String, completion: ((data: JerichoPerformance?, error: ErrorType?) -> Void)) {
        getJerichoStatsWithRequestBuilder(jerichoId: jerichoId, teamId: teamId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Gets Jericho performance statistics
     - GET /team/{teamId}/jericho/{jerichoId}/performance
     - Returns an aggregate view of the performance of a Jericho send
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example={
  "delivered" : "",
  "promptsOptedOut" : "",
  "abuseComplaints" : "",
  "click" : "",
  "videoPlay" : "",
  "promptsWithRecordings" : "",
  "promptsSent" : "",
  "uniqueLandingPageViews" : "",
  "bounce" : "",
  "contacts" : "",
  "jerichoId" : "",
  "open" : "",
  "sent" : "",
  "uniqueViews" : "",
  "landingPageViews" : ""
}, contentType=application/json}]
     
     - parameter jerichoId: (path) ID of the Jericho job 
     - parameter teamId: (path) ID of team through which Jericho was sent 

     - returns: RequestBuilder<JerichoPerformance> 
     */
    public class func getJerichoStatsWithRequestBuilder(jerichoId jerichoId: String, teamId: String) -> RequestBuilder<JerichoPerformance> {
        var path = "/team/{teamId}/jericho/{jerichoId}/performance"
        path = path.stringByReplacingOccurrencesOfString("{jerichoId}", withString: "\(jerichoId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JerichoPerformance>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     List Subteams
     
     - parameter teamId: (path) The team id 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getSubteams(teamId teamId: String, completion: ((data: [TeamPublicRepresentation]?, error: ErrorType?) -> Void)) {
        getSubteamsWithRequestBuilder(teamId: teamId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     List Subteams
     - GET /team/{teamId}/subteam
     - Returns a collection of subteams for a parent team
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example=[ {
  "id" : "aeiou",
  "name" : "aeiou",
  "createdDate" : "aeiou"
} ], contentType=application/json}]
     
     - parameter teamId: (path) The team id 

     - returns: RequestBuilder<[TeamPublicRepresentation]> 
     */
    public class func getSubteamsWithRequestBuilder(teamId teamId: String) -> RequestBuilder<[TeamPublicRepresentation]> {
        var path = "/team/{teamId}/subteam"
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[TeamPublicRepresentation]>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Creates a Jericho send.
     
     - parameter config: (body) JSON representing a Jericho configuration 
     - parameter teamId: (path) The ID of the team. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func queueJerichoSend(config config: JerichoConfiguration, teamId: String, completion: ((data: JerichoConfiguration?, error: ErrorType?) -> Void)) {
        queueJerichoSendWithRequestBuilder(config: config, teamId: teamId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Creates a Jericho send.
     - POST /team/{teamId}/jericho
     - Sends email content on behalf of members of a client group. There are two forms this send can take:         Static Email, and Video Prompt. Static emails require only an emailId.         Video Prompts build emails dynamically and require most of the other fields.         You must be an administrator of a Team Account to use this method.
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example={
  "clientGroupId" : "aeiou",
  "exampleVideoId" : "aeiou",
  "sendWithoutVideo" : true,
  "status" : "aeiou",
  "promptIntro" : "aeiou",
  "promptBody" : "aeiou",
  "emailSubject" : "aeiou",
  "printToTemplate" : true,
  "id" : "aeiou",
  "sendDate" : "2000-01-23T04:56:07.000+00:00",
  "emailId" : "aeiou",
  "followUpVideoId" : "aeiou",
  "emailBody" : "aeiou",
  "isPrompt" : true,
  "promptSubject" : "aeiou"
}, contentType=application/json}]
     
     - parameter config: (body) JSON representing a Jericho configuration 
     - parameter teamId: (path) The ID of the team. 

     - returns: RequestBuilder<JerichoConfiguration> 
     */
    public class func queueJerichoSendWithRequestBuilder(config config: JerichoConfiguration, teamId: String) -> RequestBuilder<JerichoConfiguration> {
        var path = "/team/{teamId}/jericho"
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path
        let parameters = config.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<JerichoConfiguration>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Remove Member from Team
     
     - parameter teamId: (path) The team id 
     - parameter userId: (path) The user id of the member being removed. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func removeMemberFromTeam(teamId teamId: String, userId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        removeMemberFromTeamWithRequestBuilder(teamId: teamId, userId: userId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Remove Member from Team
     - DELETE /team/{teamId}/member/{userId}
     - Removes a member from a team.
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example="aeiou", contentType=application/json}]
     
     - parameter teamId: (path) The team id 
     - parameter userId: (path) The user id of the member being removed. 

     - returns: RequestBuilder<String> 
     */
    public class func removeMemberFromTeamWithRequestBuilder(teamId teamId: String, userId: String) -> RequestBuilder<String> {
        var path = "/team/{teamId}/member/{userId}"
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{userId}", withString: "\(userId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Updates the Jericho Prompt Settings
     
     - parameter teamId: (path) The team id 
     - parameter jerichoId: (path) ID of the Jericho job 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateJerichoPromptSend(teamId teamId: String, jerichoId: String, completion: ((error: ErrorType?) -> Void)) {
        updateJerichoPromptSendWithRequestBuilder(teamId: teamId, jerichoId: jerichoId).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Updates the Jericho Prompt Settings
     - PUT /team/{teamId}/jericho/{jerichoId}
     - Updates the prompt settings based on the original email id
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter teamId: (path) The team id 
     - parameter jerichoId: (path) ID of the Jericho job 

     - returns: RequestBuilder<Void> 
     */
    public class func updateJerichoPromptSendWithRequestBuilder(teamId teamId: String, jerichoId: String) -> RequestBuilder<Void> {
        var path = "/team/{teamId}/jericho/{jerichoId}"
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        path = path.stringByReplacingOccurrencesOfString("{jerichoId}", withString: "\(jerichoId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Update a team
     
     - parameter teamId: (path) The team id 
     - parameter name: (form) The name of the team (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateTeam(teamId teamId: String, name: String? = nil, completion: ((data: TeamPublicRepresentation?, error: ErrorType?) -> Void)) {
        updateTeamWithRequestBuilder(teamId: teamId, name: name).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Update a team
     - POST /team/{teamId}
     - Update fields on a team
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example={
  "id" : "aeiou",
  "name" : "aeiou",
  "createdDate" : "aeiou"
}, contentType=application/json}]
     
     - parameter teamId: (path) The team id 
     - parameter name: (form) The name of the team (optional)

     - returns: RequestBuilder<TeamPublicRepresentation> 
     */
    public class func updateTeamWithRequestBuilder(teamId teamId: String, name: String? = nil) -> RequestBuilder<TeamPublicRepresentation> {
        var path = "/team/{teamId}"
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "name": name
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<TeamPublicRepresentation>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Update Member of Team
     
     - parameter teamId: (path) The team id 
     - parameter userId: (form) The user id of the member being added to the team. 
     - parameter admin: (form) Set if the user is an admin of this team. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func updateTeamMember(teamId teamId: String, userId: String, admin: Bool, completion: ((error: ErrorType?) -> Void)) {
        updateTeamMemberWithRequestBuilder(teamId: teamId, userId: userId, admin: admin).execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Update Member of Team
     - PUT /team/{teamId}/member
     - Updates a member of a team
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     
     - parameter teamId: (path) The team id 
     - parameter userId: (form) The user id of the member being added to the team. 
     - parameter admin: (form) Set if the user is an admin of this team. 

     - returns: RequestBuilder<Void> 
     */
    public class func updateTeamMemberWithRequestBuilder(teamId teamId: String, userId: String, admin: Bool) -> RequestBuilder<Void> {
        var path = "/team/{teamId}/member"
        path = path.stringByReplacingOccurrencesOfString("{teamId}", withString: "\(teamId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "userId": userId,
            "admin": admin
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
