//
// VideosAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class VideosAPI: APIBase {
    /**
     Video Encoding Status
     
     - parameter videoId: (path) The video&#39;s id. 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVideoEncodingStatus(videoId videoId: String, completion: ((data: VideoEncodingStatusResponse?, error: ErrorType?) -> Void)) {
        getVideoEncodingStatusWithRequestBuilder(videoId: videoId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Video Encoding Status
     - GET /videos/{videoId}/status
     - Get information about the current state of encoding for a given video id.
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example={
  "progress" : "",
  "isReady" : true,
  "isFailed" : true
}, contentType=application/json}]
     
     - parameter videoId: (path) The video&#39;s id. 

     - returns: RequestBuilder<VideoEncodingStatusResponse> 
     */
    public class func getVideoEncodingStatusWithRequestBuilder(videoId videoId: String) -> RequestBuilder<VideoEncodingStatusResponse> {
        var path = "/videos/{videoId}/status"
        path = path.stringByReplacingOccurrencesOfString("{videoId}", withString: "\(videoId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VideoEncodingStatusResponse>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Get Live Video Recorder HTML
     
     - parameter width: (query) The width of the recorder to present. (optional)
     - parameter videoId: (query) The id of the video to record (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getVideoRecorder(width width: Int32? = nil, videoId: String? = nil, completion: ((data: VideoRecorderMethodResponse?, error: ErrorType?) -> Void)) {
        getVideoRecorderWithRequestBuilder(width: width, videoId: videoId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Get Live Video Recorder HTML
     - GET /videos/live/getRecorder
     - Returns an object with a number of properties to help you put a video recorder on your site.         This is to be used in conjunction with the VideoRecordedLive call one the user has confirmed in your UI that         the video is how they want it.
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example={
  "https" : true,
  "content" : "aeiou",
  "height" : "",
  "email" : "aeiou",
  "width" : "",
  "user_id" : "aeiou",
  "client_id" : "aeiou",
  "vid_id" : "aeiou"
}, contentType=application/json}]
     
     - parameter width: (query) The width of the recorder to present. (optional)
     - parameter videoId: (query) The id of the video to record (optional)

     - returns: RequestBuilder<VideoRecorderMethodResponse> 
     */
    public class func getVideoRecorderWithRequestBuilder(width width: Int32? = nil, videoId: String? = nil) -> RequestBuilder<VideoRecorderMethodResponse> {
        let path = "/videos/live/getRecorder"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "width": width?.encodeToJSON(),
            "videoId": videoId
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VideoRecorderMethodResponse>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Completes a live recording
     
     - parameter videoId: (form) The id of the video to mark as done. 
     - parameter filename: (form) The filename that was chosen as the final video. 
     - parameter title: (form) The title to give the video 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func markLiveRecordingComplete(videoId videoId: String, filename: String, title: String, completion: ((data: VideoPublicRepresentation?, error: ErrorType?) -> Void)) {
        markLiveRecordingCompleteWithRequestBuilder(videoId: videoId, filename: filename, title: title).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Completes a live recording
     - POST /videos/live/markComplete
     - Used in conjunction with the live recorder method to mark a video recording as complete.
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example={
  "videoUrls" : [ "aeiou" ],
  "id" : "aeiou",
  "height" : "",
  "status" : "aeiou",
  "description" : "aeiou",
  "width" : "",
  "name" : "aeiou",
  "userId" : "aeiou",
  "thumbUrl" : "aeiou",
  "shortUrl" : "aeiou",
  "uploadDate" : "aeiou"
}, contentType=application/json}]
     
     - parameter videoId: (form) The id of the video to mark as done. 
     - parameter filename: (form) The filename that was chosen as the final video. 
     - parameter title: (form) The title to give the video 

     - returns: RequestBuilder<VideoPublicRepresentation> 
     */
    public class func markLiveRecordingCompleteWithRequestBuilder(videoId videoId: String, filename: String, title: String) -> RequestBuilder<VideoPublicRepresentation> {
        let path = "/videos/live/markComplete"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "videoId": videoId,
            "filename": filename,
            "title": title
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<VideoPublicRepresentation>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Generate Signed Url
     
     - parameter policy: (body) The policy to sign 
     - parameter v4: (form) Whether to do v4 signing (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func signUpload(policy policy: SignUploadRequest, v4: Bool? = nil, completion: ((data: String?, error: ErrorType?) -> Void)) {
        signUploadWithRequestBuilder(policy: policy, v4: v4).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Generate Signed Url
     - POST /video/signedUpload
     - Generates a signed url to be used for video uploads.
     - examples: [{example="aeiou", contentType=application/json}]
     
     - parameter policy: (body) The policy to sign 
     - parameter v4: (form) Whether to do v4 signing (optional)

     - returns: RequestBuilder<String> 
     */
    public class func signUploadWithRequestBuilder(policy policy: SignUploadRequest, v4: Bool? = nil) -> RequestBuilder<String> {
        let path = "/video/signedUpload"
        let URLString = bombbomb-swift-openapiAPI.basePath + path
        let parameters = policy.encodeToJSON() as? [String:AnyObject]
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

}
