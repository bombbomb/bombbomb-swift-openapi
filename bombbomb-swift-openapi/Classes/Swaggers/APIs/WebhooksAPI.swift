//
// WebhooksAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire



public class WebhooksAPI: APIBase {
    /**
     Add Webhook
     
     - parameter hookUrl: (form) The Url of your listener 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func addWebHook(hookUrl hookUrl: String, completion: ((data: BBWebHook?, error: ErrorType?) -> Void)) {
        addWebHookWithRequestBuilder(hookUrl: hookUrl).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Add Webhook
     - POST /webhook
     - Idempotently adds a Webhook url
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example={
  "isHidden" : true,
  "userId" : "aeiou",
  "hookId" : "",
  "url" : "aeiou"
}, contentType=application/json}]
     
     - parameter hookUrl: (form) The Url of your listener 

     - returns: RequestBuilder<BBWebHook> 
     */
    public class func addWebHookWithRequestBuilder(hookUrl hookUrl: String) -> RequestBuilder<BBWebHook> {
        let path = "/webhook"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [
            "hookUrl": hookUrl
        ]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<BBWebHook>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: false)
    }

    /**
     Deletes Webhook
     
     - parameter hookId: (path) The id of the webhook to delete 
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func deleteWebHook(hookId hookId: String, completion: ((data: String?, error: ErrorType?) -> Void)) {
        deleteWebHookWithRequestBuilder(hookId: hookId).execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Deletes Webhook
     - DELETE /webhook/{hookId}
     - Deletes a Webhook
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example="aeiou", contentType=application/json}]
     
     - parameter hookId: (path) The id of the webhook to delete 

     - returns: RequestBuilder<String> 
     */
    public class func deleteWebHookWithRequestBuilder(hookId hookId: String) -> RequestBuilder<String> {
        var path = "/webhook/{hookId}"
        path = path.stringByReplacingOccurrencesOfString("{hookId}", withString: "\(hookId)", options: .LiteralSearch, range: nil)
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<String>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Lists Webhooks
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func getWebHooks(completion: ((data: [BBWebHook]?, error: ErrorType?) -> Void)) {
        getWebHooksWithRequestBuilder().execute { (response, error) -> Void in
            completion(data: response?.body, error: error);
        }
    }


    /**
     Lists Webhooks
     - GET /webhook/
     - Lists all registered Webhooks
     - OAuth:
       - type: oauth2
       - name: BBOAuth2
     - examples: [{example=[ {
  "isHidden" : true,
  "userId" : "aeiou",
  "hookId" : "",
  "url" : "aeiou"
} ], contentType=application/json}]

     - returns: RequestBuilder<[BBWebHook]> 
     */
    public class func getWebHooksWithRequestBuilder() -> RequestBuilder<[BBWebHook]> {
        let path = "/webhook/"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<[BBWebHook]>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

    /**
     Sends test Webhook
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    public class func sendWebhookExample(completion: ((error: ErrorType?) -> Void)) {
        sendWebhookExampleWithRequestBuilder().execute { (response, error) -> Void in
            completion(error: error);
        }
    }


    /**
     Sends test Webhook
     - POST /webhook/test
     - Triggers a test webhook to be sent to your endpoints.
     - OAuth:
       - type: oauth2
       - name: BBOAuth2

     - returns: RequestBuilder<Void> 
     */
    public class func sendWebhookExampleWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/webhook/test"
        let URLString = bombbomb-swift-openapiAPI.basePath + path

        let nillableParameters: [String:AnyObject?] = [:]
 
        let parameters = APIHelper.rejectNil(nillableParameters)
 
        let convertedParameters = APIHelper.convertBoolToString(parameters)
 
        let requestBuilder: RequestBuilder<Void>.Type = bombbomb-swift-openapiAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: URLString, parameters: convertedParameters, isBody: true)
    }

}
