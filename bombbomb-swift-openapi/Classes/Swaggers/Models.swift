// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> AnyObject
}

public class Response<T> {
    public let statusCode: Int
    public let header: [String: String]
    public let body: T

    public init(statusCode: Int, header: [String: String], body: T) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: NSHTTPURLResponse, body: T) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = dispatch_once_t()
class Decoders {
    static private var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz clazz: T.Type, decoder: ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as! AnyObject }
    }

    static func decode<T>(clazz clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.intValue as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.longLongValue as! T;
        }
        if T.self is NSUUID.Type && source is String {
            return NSUUID(UUIDString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is NSData.Type && source is String {
            return NSData(base64EncodedString: source as! String, options: NSDataBase64DecodingOptions()) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static private func initialize() {
        dispatch_once(&once) {
            let formatters = [
                "yyyy-MM-dd",
                "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
                "yyyy-MM-dd'T'HH:mm:ss'Z'",
                "yyyy-MM-dd'T'HH:mm:ss.SSS"
            ].map { (format: String) -> NSDateFormatter in
                let formatter = NSDateFormatter()
                formatter.dateFormat = format
                return formatter
            }
            // Decoder for NSDate
            Decoders.addDecoder(clazz: NSDate.self) { (source: AnyObject) -> NSDate in
               if let sourceString = source as? String {
                    for formatter in formatters {
                        if let date = formatter.dateFromString(sourceString) {
                            return date
                        }
                    }

                }
                if let sourceInt = source as? Int {
                    // treat as a java date
                    return NSDate(timeIntervalSince1970: Double(sourceInt / 1000) )
                }
                fatalError("formatter failed to parse \(source)")
            } 

            // Decoder for [BBWebHook]
            Decoders.addDecoder(clazz: [BBWebHook].self) { (source: AnyObject) -> [BBWebHook] in
                return Decoders.decode(clazz: [BBWebHook].self, source: source)
            }
            // Decoder for BBWebHook
            Decoders.addDecoder(clazz: BBWebHook.self) { (source: AnyObject) -> BBWebHook in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = BBWebHook()
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.hookId = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["hookId"])
                instance.url = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["url"])
                instance.isHidden = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isHidden"])
                return instance
            }


            // Decoder for [Curriculum]
            Decoders.addDecoder(clazz: [Curriculum].self) { (source: AnyObject) -> [Curriculum] in
                return Decoders.decode(clazz: [Curriculum].self, source: source)
            }
            // Decoder for Curriculum
            Decoders.addDecoder(clazz: Curriculum.self) { (source: AnyObject) -> Curriculum in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = Curriculum()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.htmlIntro = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["htmlIntro"])
                instance.imgUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imgUrl"])
                instance.itemCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["itemCount"])
                instance.renderAs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["renderAs"])
                instance.visibleToAllUsers = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["visibleToAllUsers"])
                instance.progress = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["progress"])
                return instance
            }


            // Decoder for [CurriculumUserProgress]
            Decoders.addDecoder(clazz: [CurriculumUserProgress].self) { (source: AnyObject) -> [CurriculumUserProgress] in
                return Decoders.decode(clazz: [CurriculumUserProgress].self, source: source)
            }
            // Decoder for CurriculumUserProgress
            Decoders.addDecoder(clazz: CurriculumUserProgress.self) { (source: AnyObject) -> CurriculumUserProgress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CurriculumUserProgress()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.curriculumItemId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["curriculumItemId"])
                instance.curriculumId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["curriculumId"])
                instance.completedDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["completedDate"])
                return instance
            }


            // Decoder for [CurriculumWithProgress]
            Decoders.addDecoder(clazz: [CurriculumWithProgress].self) { (source: AnyObject) -> [CurriculumWithProgress] in
                return Decoders.decode(clazz: [CurriculumWithProgress].self, source: source)
            }
            // Decoder for CurriculumWithProgress
            Decoders.addDecoder(clazz: CurriculumWithProgress.self) { (source: AnyObject) -> CurriculumWithProgress in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = CurriculumWithProgress()
                instance.progress = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["progress"])
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.htmlIntro = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["htmlIntro"])
                instance.imgUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["imgUrl"])
                instance.itemCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["itemCount"])
                instance.renderAs = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["renderAs"])
                instance.visibleToAllUsers = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["visibleToAllUsers"])
                return instance
            }


            // Decoder for [InlineResponse200]
            Decoders.addDecoder(clazz: [InlineResponse200].self) { (source: AnyObject) -> [InlineResponse200] in
                return Decoders.decode(clazz: [InlineResponse200].self, source: source)
            }
            // Decoder for InlineResponse200
            Decoders.addDecoder(clazz: InlineResponse200.self) { (source: AnyObject) -> InlineResponse200 in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200()
                instance.totalPages = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["totalPages"])
                instance.items = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["items"])
                return instance
            }


            // Decoder for [InlineResponse200Items]
            Decoders.addDecoder(clazz: [InlineResponse200Items].self) { (source: AnyObject) -> [InlineResponse200Items] in
                return Decoders.decode(clazz: [InlineResponse200Items].self, source: source)
            }
            // Decoder for InlineResponse200Items
            Decoders.addDecoder(clazz: InlineResponse200Items.self) { (source: AnyObject) -> InlineResponse200Items in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = InlineResponse200Items()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.thumbUrl = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["thumbUrl"])
                return instance
            }


            // Decoder for [JerichoConfiguration]
            Decoders.addDecoder(clazz: [JerichoConfiguration].self) { (source: AnyObject) -> [JerichoConfiguration] in
                return Decoders.decode(clazz: [JerichoConfiguration].self, source: source)
            }
            // Decoder for JerichoConfiguration
            Decoders.addDecoder(clazz: JerichoConfiguration.self) { (source: AnyObject) -> JerichoConfiguration in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JerichoConfiguration()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.clientGroupId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientGroupId"])
                instance.sendDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["sendDate"])
                instance.isPrompt = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["isPrompt"])
                instance.emailId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailId"])
                instance.promptSubject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["promptSubject"])
                instance.promptBody = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["promptBody"])
                instance.emailSubject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailSubject"])
                instance.emailBody = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailBody"])
                instance.sendWithoutVideo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sendWithoutVideo"])
                instance.status = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["status"])
                return instance
            }


            // Decoder for [JerichoPerformance]
            Decoders.addDecoder(clazz: [JerichoPerformance].self) { (source: AnyObject) -> [JerichoPerformance] in
                return Decoders.decode(clazz: [JerichoPerformance].self, source: source)
            }
            // Decoder for JerichoPerformance
            Decoders.addDecoder(clazz: JerichoPerformance.self) { (source: AnyObject) -> JerichoPerformance in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = JerichoPerformance()
                instance.sent = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["sent"])
                instance.uniqueViews = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["uniqueViews"])
                instance.uniqueLandingPageViews = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["uniqueLandingPageViews"])
                instance.landingPageViews = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["landingPageViews"])
                instance.delivered = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["delivered"])
                instance.bounce = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["bounce"])
                instance.open = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["open"])
                instance.click = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["click"])
                instance.videoPlay = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["videoPlay"])
                instance.abuseComplaints = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["abuseComplaints"])
                instance.contacts = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["contacts"])
                return instance
            }


            // Decoder for [ModelString]
            Decoders.addDecoder(clazz: [ModelString].self) { (source: AnyObject) -> [ModelString] in
                return Decoders.decode(clazz: [ModelString].self, source: source)
            }
            // Decoder for ModelString
            Decoders.addDecoder(clazz: ModelString.self) { (source: AnyObject) -> ModelString in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = ModelString()
                return instance
            }


            // Decoder for [OAuthClient]
            Decoders.addDecoder(clazz: [OAuthClient].self) { (source: AnyObject) -> [OAuthClient] in
                return Decoders.decode(clazz: [OAuthClient].self, source: source)
            }
            // Decoder for OAuthClient
            Decoders.addDecoder(clazz: OAuthClient.self) { (source: AnyObject) -> OAuthClient in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = OAuthClient()
                instance.identifier = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["identifier"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.clientSecret = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["clientSecret"])
                instance.grantsAllowed = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["grantsAllowed"])
                instance.owningUserId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["owningUserId"])
                instance.redirectUri = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["redirectUri"])
                return instance
            }


            // Decoder for [TeamPublicRepresentation]
            Decoders.addDecoder(clazz: [TeamPublicRepresentation].self) { (source: AnyObject) -> [TeamPublicRepresentation] in
                return Decoders.decode(clazz: [TeamPublicRepresentation].self, source: source)
            }
            // Decoder for TeamPublicRepresentation
            Decoders.addDecoder(clazz: TeamPublicRepresentation.self) { (source: AnyObject) -> TeamPublicRepresentation in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = TeamPublicRepresentation()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"])
                instance.createdDate = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["createdDate"])
                return instance
            }


            // Decoder for [VideoEmailPrompt]
            Decoders.addDecoder(clazz: [VideoEmailPrompt].self) { (source: AnyObject) -> [VideoEmailPrompt] in
                return Decoders.decode(clazz: [VideoEmailPrompt].self, source: source)
            }
            // Decoder for VideoEmailPrompt
            Decoders.addDecoder(clazz: VideoEmailPrompt.self) { (source: AnyObject) -> VideoEmailPrompt in
                let sourceDictionary = source as! [NSObject:AnyObject]
                let instance = VideoEmailPrompt()
                instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"])
                instance.userId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["userId"])
                instance.templateId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["templateId"])
                instance.emailSubjectLine = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailSubjectLine"])
                instance.emailContent = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailContent"])
                instance.toEmailAddresses = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["toEmailAddresses"])
                instance.toLists = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["toLists"])
                instance.jerichoId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jerichoId"])
                instance.promptSubject = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["promptSubject"])
                instance.promptHtml = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["promptHtml"])
                instance.sendWithoutVideo = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["sendWithoutVideo"])
                instance.videoDueDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["videoDueDate"])
                instance.scheduledSendDate = Decoders.decodeOptional(clazz: NSDate.self, source: sourceDictionary["scheduledSendDate"])
                instance.videoId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["videoId"])
                instance.emailId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["emailId"])
                instance.jobId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["jobId"])
                instance.status = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["status"])
                instance.doNotApplyTemplate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["doNotApplyTemplate"])
                return instance
            }
        }
    }
}
